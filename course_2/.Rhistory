frame$`3P%` <- as.character(strsplit(abc,split="%"))
frame5 <- frame[order(frame$`3P%`) , decreasing = TRUE,]
frame$`3P%` <- as.numeric(as.character(strsplit(abc,split="%")))
frame5 <- frame[order(frame$`3P%`) , decreasing = TRUE,]
abc <- as.character(frame$`3P%`)
frame$`3P%` <- as.numeric(as.character(strsplit(abc,split="%")))
frame5 <- frame[order(frame$`3P%`) , decreasing = TRUE,]
abc <- as.character(frame$`3P%`)
frame$`3P%` <- as.numeric(strsplit(abc,split="%"))
frame5 <- frame[order(frame$`3P%`) , decreasing = TRUE,]
num3pt <- as.numeric(strsplit(abc,split="%"))
frame5 <- frame[order(num3pt) , decreasing = TRUE,]
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
View(frame5)
View(frame5)
rm(list = ls())
library(XML)
library(rvest)
#爬取30支球隊的名稱
teams <- read_html("http://www.nba.com/teams")
teamstitle <- c(".team__list")
title <- html_nodes(teams,teamstitle)
title <- html_text(title)
title <- iconv(title,"UTF-8")
title <- tolower(title)
# title中的index 1~30 代表30支球隊
b <- strsplit(title[17],split=" ")
names(b) <- "Teamname"
b$Teamname[2]
#爬取球隊每位球員的數據
url <- paste("http://www.nba.com/" , b$Teamname[2] , "/stats", sep="")
dt1 <- readHTMLTable(url)
frame <- dt1[[2]]
names(frame)
frame1 <- frame[order(as.numeric(as.character(frame$PTS)) , decreasing = TRUE),]
frame2 <- frame[order(as.numeric(as.character(frame$REB)) , decreasing = TRUE),]
frame3 <- frame[order(as.numeric(as.character(frame$AST)) , decreasing = TRUE),]
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
abc <- as.character(frame$`3P%`)
num3pt <- as.numeric(strsplit(abc,split="%"))
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
View(frame5)
names(frame)
# title中的index 1~30 代表30支球隊
b <- strsplit(title[13],split=" ")
names(b) <- "Teamname"
#爬取球隊每位球員的數據
url <- paste("http://www.nba.com/" , b$Teamname[2] , "/stats", sep="")
dt1 <- readHTMLTable(url)
frame <- dt1[[2]]
frame1 <- frame[order(as.numeric(as.character(frame$PTS)) , decreasing = TRUE),]
frame2 <- frame[order(as.numeric(as.character(frame$REB)) , decreasing = TRUE),]
frame3 <- frame[order(as.numeric(as.character(frame$AST)) , decreasing = TRUE),]
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
abc <- as.character(frame$`3P%`)
num3pt <- as.numeric(strsplit(abc,split="%"))
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
View(frame5)
View(frame1)
View(frame1)
View(frame2)
View(frame3)
View(frame5)
# title中的index 1~30 代表30支球隊
b <- strsplit(title[17],split=" ")
names(b) <- "Teamname"
#爬取球隊每位球員的數據
url <- paste("http://www.nba.com/" , b$Teamname[2] , "/stats", sep="")
dt1 <- readHTMLTable(url)
frame <- dt1[[2]]
frame1 <- frame[order(as.numeric(as.character(frame$PTS)) , decreasing = TRUE),]
frame2 <- frame[order(as.numeric(as.character(frame$REB)) , decreasing = TRUE),]
frame3 <- frame[order(as.numeric(as.character(frame$AST)) , decreasing = TRUE),]
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
abc <- as.character(frame$`3P%`)
num3pt <- as.numeric(strsplit(abc,split="%"))
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
View(frame4)
View(frame4)
frame4 <- frame4$STL
frame4
#sort with stl
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
View(frame)
strsplit(abcd,split="1")
abcd <- as.character(frame$Player)
strsplit(abcd,split="1")
abcd <- as.character(frame$Player)
for(i in (0:9)){
strsplit(abcd,split=as.character(i))
}
abcd <- strsplit(abcd,split=as.character(i))
for(i in (0:9)){
abcd <- strsplit(abcd,split=as.character(i))
}
abcd <- as.character(frame$Player)
for(i in (0:9)){
abcd <- strsplit(abcd,split=as.character(i))
}
abcd <- as.character(frame$Player)
for(i in (0:9)){
abcd <- strsplit(abcd,split="0")
}
abcd <- as.character(frame$Player)
for(i in (0:9)){
abcde <- strsplit(abcd,split="0")
}
View(abcde)
abcd <- as.character(frame$Player)
for(i in (0:9)){
abcde <- strsplit(abcd,split=as.character(i))
}
View(abcde)
for(i in (0:9)){
abcde <- strsplit(abcd,split="0")
}
View(abcde)
abcde
abcd <- as.character(frame$Player)
for(i in (0:9)){
abcde <- strsplit(abcd,split=as.character(i))
}
abcde
playername <- as.character(frame$Player)
playername <-strsplit(playername,split="0")
playername <-strsplit(playername,split="1")
playername <-strsplit(playername,split="2")
playername <-strsplit(playername,split="3")
playername <- as.character(frame$Player)
playername <-strsplit(playername,split="0")
View(playername)
playername <- as.character(playername)
playername <-strsplit(playername,split="1")
View(playername)
playername <- as.character(frame$Player)
playername <-strsplit(playername,split="0")
playername <- as.character(playername)
playername <-strsplit(playername,split="1")
View(playername)
playername
playername <- as.character(frame$Player)
playername <-strsplit(playername,split="0")
playername <- as.character(playername)
playername <-strsplit(playername,split="1")
playername <- as.character(playername)
playername <-strsplit(playername,split="2")
playername <- as.character(playername)
playername <-strsplit(playername,split="3")
playername <- as.character(playername)
playername <-strsplit(playername,split="4")
playername <- as.character(playername)
playername <-strsplit(playername,split="5")
playername <- as.character(playername)
playername <-strsplit(playername,split="6")
playername <- as.character(playername)
playername <-strsplit(playername,split="7")
playername <- as.character(playername)
playername <-strsplit(playername,split="8")
playername <- as.character(playername)
playername <-strsplit(playername,split="9")
playername
View(teams)
View(playername)
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , spilt = '\u0095')
playername1 <- strsplit(playername , spilt = '0095')
playername1 <- strsplit(playername , spilt = "1", fixed=T)
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , spilt = "1", fixed=T)
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
View(playername1)
frame$Player <- playername1
View(frame)
View(playername1)
playername1[1]
playername1[2]
playername1[1][1]
names(playername1) <- c("Name", "Position")
frame$Player <- playername1$Name
View(playername1)
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
View(playername1)
names(playername1) <- c("Name", "Position")
View(playername1)
View(playername1)
frame$Player <- playername1$Name
View(playername1)
View(frame)
names(playername1) <- "Name"
frame$Player <- playername1$Name[1]
View(frame)
frame$Player
frame$Player <- playername1$Name
frame$Player
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
names(playername1) <- "Name"
frame$Player <- playername1$Name
frame$Player
rm(list = ls())
source('~/Desktop/cs-x-programming/hw2/NBAstats.R')
rm(list = ls())
playername <- as.character(frame$Player)
rm(list = ls())
library(XML)
library(rvest)
#爬取30支球隊的名稱
teams <- read_html("http://www.nba.com/teams")
teamstitle <- c(".team__list")
title <- html_nodes(teams,teamstitle)
title <- html_text(title)
title <- iconv(title,"UTF-8")
title <- tolower(title)
# title中的index 1~30 代表30支球隊
b <- strsplit(title[17],split=" ")
names(b) <- "Teamname"
#爬取球隊每位球員的數據
url <- paste("http://www.nba.com/" , b$Teamname[2] , "/stats", sep="")
dt1 <- readHTMLTable(url)
frame <- dt1[[2]]
#Sort with pts
frame1 <- frame[order(as.numeric(as.character(frame$PTS)) , decreasing = TRUE),]
#Sort with reb
frame2 <- frame[order(as.numeric(as.character(frame$REB)) , decreasing = TRUE),]
#sort with ast
frame3 <- frame[order(as.numeric(as.character(frame$AST)) , decreasing = TRUE),]
#sort with stl
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
abc <- as.character(frame$`3P%`)
num3pt <- as.numeric(strsplit(abc,split="%"))
#sort with 3pt%
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
View(playername1)
playername1[1]
names(playername1) <- "Name"
View(playername1)
View(playername1)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
View(playername1)
View(playername1)
playername1[1][2]
playername1[1][1]
b$Teamname[2]
View(b)
name(playername1) <- "player"
names(playername1) <- "player"
View(playername1)
names(playername1[1]) <- "player"
View(playername1)
names(playername1[[1]]) <- "player"
View(playername1)
playername1
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
playername1
names(playername1) <- "player"
playername1
playername1$player[2]
playername1$player[1]
names(playername1[2]) <- "player"
playername1$player[1]
playername1
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
playername1$player[1]
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
playername1
playername1[[2]][1]
playername1[[]][1]
playername1[[4]][1]
frame$Player[1]
frame$Player[1] <- playername1[[1]][1]
frame$Player[1] <- factor(playername1[[1]][1])
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
frame$Player[1] <- factor(playername1[[1]][1])
frame$Player
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
frame$Player[1] <- factor(playername1[[1]][1])
frame$Player
factor(playername1[[1]][1])
(playername1[[1]][1])
View(playername1)
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
(playername1[[1]][1])
View(playername1)
rm(list = ls())
library(XML)
library(rvest)
#爬取30支球隊的名稱
teams <- read_html("http://www.nba.com/teams")
teamstitle <- c(".team__list")
title <- html_nodes(teams,teamstitle)
title <- html_text(title)
title <- iconv(title,"UTF-8")
title <- tolower(title)
# title中的index 1~30 代表30支球隊
b <- strsplit(title[17],split=" ")
names(b) <- "Teamname"
b$Teamname[2]
#爬取球隊每位球員的數據
url <- paste("http://www.nba.com/" , b$Teamname[2] , "/stats", sep="")
dt1 <- readHTMLTable(url)
frame <- dt1[[2]]
#Sort with pts
frame1 <- frame[order(as.numeric(as.character(frame$PTS)) , decreasing = TRUE),]
#Sort with reb
frame2 <- frame[order(as.numeric(as.character(frame$REB)) , decreasing = TRUE),]
#sort with ast
frame3 <- frame[order(as.numeric(as.character(frame$AST)) , decreasing = TRUE),]
#sort with stl
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
abc <- as.character(frame$`3P%`)
num3pt <- as.numeric(strsplit(abc,split="%"))
#sort with 3pt%
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
(playername1[[1]][1])
frame$Player[1] <- (playername1[[1]][1])
frame$Player[1] <- factor(playername1[[1]][1])
frame$Player
frame$Player[1] <- factor(playername1[[1]][1])
View(playername1)
factor(playername1[[1]][1])
frame$Player[1] <- factor(playername1[[1]][1])
frame$Player
frame$Player <- as.character(frame$Player)
View(frame)
frame$Player
frame$Player[1] <- playername1[[1]][1]
View(frame)
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
frame$Player <- as.character(frame$Player)
for (i in 1:length(frame$Player)) {
frame$Player[i] <- playername1[[i]][1]
}
frame <- data.frame(frame$Player,frame$G,frame$PTS,frame$`FG%`,frame$`3P%`,frame$REB,frame$AST,frame$STL)
View(frame)
rm(list = ls())
library(XML)
library(rvest)
#爬取30支球隊的名稱
teams <- read_html("http://www.nba.com/teams")
teamstitle <- c(".team__list")
title <- html_nodes(teams,teamstitle)
title <- html_text(title)
title <- iconv(title,"UTF-8")
title <- tolower(title)
# title中的index 1~30 代表30支球隊
b <- strsplit(title[17],split=" ")
names(b) <- "Teamname"
b$Teamname[2]
#爬取球隊每位球員的數據
url <- paste("http://www.nba.com/" , b$Teamname[2] , "/stats", sep="")
dt1 <- readHTMLTable(url)
frame <- dt1[[2]]
#將名字中的亂碼移除
playername <- as.character(frame$Player)
playername1 <- strsplit(playername , split = "\u0095", fixed=T)
frame$Player <- as.character(frame$Player)
for (i in 1:length(frame$Player)) {
frame$Player[i] <- playername1[[i]][1]
}
name1 <- names(frame)
frame <- data.frame(frame$Player,frame$G,frame$PTS,frame$`FG%`,frame$`3P%`,frame$REB,frame$AST,frame$STL)
names(frame) <- c("Player","G","PTS","FG%","3P%","REB","AST","STL")
#Sort with pts
frame1 <- frame[order(as.numeric(as.character(frame$PTS)) , decreasing = TRUE),]
#Sort with reb
frame2 <- frame[order(as.numeric(as.character(frame$REB)) , decreasing = TRUE),]
#sort with ast
frame3 <- frame[order(as.numeric(as.character(frame$AST)) , decreasing = TRUE),]
#sort with stl
frame4 <- frame[order(as.numeric(as.character(frame$STL)) , decreasing = TRUE),]
abc <- as.character(frame$`3P%`)
num3pt <- as.numeric(strsplit(abc,split="%"))
#sort with 3pt%
frame5 <- frame[order((num3pt) , decreasing = TRUE),]
### practice_2
### dataframe practice - II
rm(list = ls())
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = TRUE, stringsAsFactors = F)
setwd("~/Desktop/cs-x-programming/course_2")
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = TRUE, stringsAsFactors = F)
View(df)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = " ", header = TRUE, stringsAsFactors = F)
View(df)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = TRUE, stringsAsFactors = F)
# 使用dim()查看df的維度(列數與欄數)
dim(df)
# 使用head()查看df前6筆資料
head(df)
# 使用tail()查看df後6筆資料
tail(df)
### Part I - 讀取資料與查看資料框內容 ##############################################
# 使用read.table()讀取test_data.csv
# 請注意sep, header的用途, 以及stringsAsFactors = F的影響
df <- read.table('test_data.csv', sep = ",", header = TRUE, stringsAsFactors = F)
# 使用summary()查看df的描述性統計
summary(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as._____(df$______)
# 使用str()查看df的詳細資訊
str(df)
# 將df$School與df$Sex轉為factor型態
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
### Part II - 資料框整理技巧I #######################################################
# 請注意vector特性：
# 向量物件只能接受一種類別，若給定多種類別會依[字串>數值>布林]進行自動轉換
# 這使得kobe資料內的型態都被轉存為chr了
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
View(df)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade[11] <- 990
# 轉換df欄位的資料型態 # Grade: integer, Age, Height, Weight: numeric
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
# 查看df結構，是否是轉換完畢結果
str(df)
# 使用order()，以df$Grade將df遞減排序
df <- df[order(df$Grade, decreasing = TRUE), ]
# 使用subset()，刪除df$Age欄位(另一種方式df$Age <- NULL)
df <- subset(df, select = c(-df$Age))
# 使用subset()，刪除df$Age欄位(另一種方式df$Age <- NULL)
df <- subset(df, select = c(-df$Age))
# 使用subset()，刪除df$Age欄位(另一種方式df$Age <- NULL)
df <- subset(df, select = c(-Age))
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[4] <- "ToeicGrade"
# 使用subset()，篩選出ToeicGrade大於900並且身高大於170的人
# 且欄位只需要Name, ToeicGrade與Height
subset(df, Height > 170 & ToeicGrade > 900, select = c(Name, ToeicGrade, Height))
# 不使用subset()，篩選出df中School A的人。
df[df$School == 'A', ]
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
# 使用merge()，將df.sport資料與df進行連結後更新至df，並設定all.x = T保留所有資料
# 參考https://joe11051105.gitbooks.io/r_basic/content/arrange_data/merge_and_subsetting.html
df <- merge(df, df.sport, by = 'Name', all.x = T)
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi(), df$Height,df$Weight)
### GetBmi 請複製您於practice_1.R的function GetBmi
GetBmi <- function (my.height.cm, my.weight.kg){
# Create my.height.m by my.height.cm
my.height.m <- my.height.cm / 100
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m) ^ 2
# Return my.bmi
return (my.bmi)
}
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi(), df$Height,df$Weight)
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi(df$Height,df$Weight), df$Height,df$Weight)
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi(df$Height,df$Weight))
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi,df$Height,df$Weight)
# 使用merge()，將df.sport資料與df進行連結後更新至df，並設定all.x = T保留所有資料
# 參考https://joe11051105.gitbooks.io/r_basic/content/arrange_data/merge_and_subsetting.html
df <- merge(df, df.sport, by = 'Name', all.x = T)
### Part III - 資料框整理技巧II #####################################################
df.sport <- data.frame(Name = c("Ali", "Petty", "Kobe"), FavSport = c("basketball", "baseball", "baseketball"))
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
# 使用mapply()進行bmi計算[調用GetBmi()，參數分別為df$Height, df$Weight]，回傳結果新增至df$Bmi欄位
# 參考http://blog.fens.me/r-apply/
df$Bmi <- mapply(GetBmi,df$Height,df$Weight)
# 使用merge()，將df.sport資料與df進行連結後更新至df，並設定all.x = T保留所有資料
# 參考https://joe11051105.gitbooks.io/r_basic/content/arrange_data/merge_and_subsetting.html
df <- merge(df, df.sport, by = 'Name', all.x = T)
View(df)
View(df.sport)
