docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb4\x9c')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xbd')
docs <- tm_map(docs, toSpace, '\u2b50')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\xad')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x8b')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbe\xed\xb6\x80')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xa5')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x82')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xb2')
docs<-tm_map(docs,stripWhitespace)
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,removePunctuation)
for (i in c(1:50)){
print(docs[[i]][1])
}
docs <- tm_map(docs, segmentCN, nature = TRUE)
library("tmcn")
docs <- tm_map(docs, segmentCN, nature = TRUE)
library("tmcn")
library("rJava")
install.packages("rJava")
install.packages("Rwordseg")
install.packages("SnowballC")
install.packages("slam")
install.packages("slam")
install.packages("slam")
install.packages("slam")
library("tmcn")
library("rJava")
library("Rwordseg")
library("rJava")
library("Rwordseg")
library("SnowballC")
library("slam")
token <- "EAACEdEose0cBAIZCUie4VvGOYGCUZAl9ZB6CVUK7bRZCegWFHZCgHLO6DQNBIyC5VWrDWlFzE2lNwykfvV2ecgm82uNkfZAQZB4QgbUcUZAjzRMqrAJIFRQZCsppqt7fZC0ZCX1Vsp92NiiJ5TfMq62Ulis194ZCnh7F4S4z52t80RTtuiVdhXukfOXsEMrZBp2uvIM9CkCmS3ZCdj8AZDZD"
page.id <- "382641298513460"
page <- getPage(page.id, token, n = 50)
Page <- subset(page, select = c(from_id, message))
colnames(Page) <- c("doc_id","text")
print(Page$text[1])
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))}
)
docs <- VCorpus(DataframeSource(Page))
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb1\x8d')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb1\x89')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x8d')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\xb1')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbf\x83')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb4\x9c')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xbd')
docs <- tm_map(docs, toSpace, '\u2b50')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\xad')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x8b')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbe\xed\xb6\x80')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xa5')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x82')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xb2')
docs<-tm_map(docs,stripWhitespace)
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,removePunctuation)
for (i in c(1:50)){
print(docs[[i]][1])
}
docs <- tm_map(docs, segmentCN, nature = TRUE)
tdm <- TermDocumentMatrix(docs, control = list(wordLengths = c(1,1)))
inspect(tdm)
library(magrittr)
library(devtools)
library(Rfacebook)
library("jiebaR")
library(tm)
library(NLP)
library("tmcn")
library("rJava")
library("Rwordseg")
install.packages("rJava")
library("rJava")
cc = worker()
library(magrittr)
library(devtools)
library(Rfacebook)
library("jiebaR")
library(tm)
library(NLP)
library("tmcn")
library("SnowballC")
library("slam")
token <- "EAACEdEose0cBAIZCUie4VvGOYGCUZAl9ZB6CVUK7bRZCegWFHZCgHLO6DQNBIyC5VWrDWlFzE2lNwykfvV2ecgm82uNkfZAQZB4QgbUcUZAjzRMqrAJIFRQZCsppqt7fZC0ZCX1Vsp92NiiJ5TfMq62Ulis194ZCnh7F4S4z52t80RTtuiVdhXukfOXsEMrZBp2uvIM9CkCmS3ZCdj8AZDZD"
page.id <- "382641298513460"
page <- getPage(page.id, token, n = 50)
Page <- subset(page, select = c(from_id, message))
colnames(Page) <- c("doc_id","text")
print(Page$text[1])
toSpace <- content_transformer(function(x, pattern) {
return (gsub(pattern, " ", x))}
)
docs <- VCorpus(DataframeSource(Page))
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb1\x8d')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb1\x89')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x8d')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\xb1')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbf\x83')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb4\x9c')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xbd')
docs <- tm_map(docs, toSpace, '\u2b50')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\xad')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x8b')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbe\xed\xb6\x80')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xa5')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbd\xed\xb8\x82')
docs <- tm_map(docs, toSpace, '\xed\xa0\xbc\xed\xbd\xb2')
docs<-tm_map(docs,stripWhitespace)
docs<-tm_map(docs,removeNumbers)
docs<-tm_map(docs,removePunctuation)
for (i in c(1:50)){
print(docs[[i]][1])
}
cc = worker()
tdm <- TermDocumentMatrix(cc[docs], control = list(wordLengths = c(1,1)))
inspect(tdm)
cc[docs]
myfunc <- lapply( "https://goo.gl/Pi1uzn", source)
CheckMyHw( "B05902010", "HW01", "BIG5" )
CheckMyHw( "B05902010", "HW02", "BIG5" )
CheckMyHw( "B05902010", "HW04", "BIG5" )
CheckMyHw( "B05902010", "HW03", "BIG5" )
kable(head(GATDF))
library(knitr)
kable(head(GATDF))
library(bitops)
library(httr)
library(RCurl)
library(XML)
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(tm)
library(NLP)
library(tmcn)
library(jiebaRD)
library(jiebaR)
data <- list()
title <- list()
#原本用getURL 結果發現url.list裡面是NULL 改用GET後就正確了
#抓取從明星賽後到現在的 ptt NBA版的貼文
for( i in c(5674:5810)){
tmp <- paste(i, '.html', sep='')
url <- paste('www.ptt.cc/bbs/NBA/index', tmp, sep='')
html <- htmlParse(GET(url),encoding = "UTF-8")
title.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlValue)
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
data <- rbind(data, paste('www.ptt.cc', url.list, sep=''))
title <- rbind(title, title.list)
}
# data 存網址  title 存標題
data <- unlist(data)
title <- unlist(title)
#初始化
Lebron <- c()
Giannis <- c()
Curry <- c()
Harden <- c()
Lebron.url <- c()
Giannis.url <- c()
Curry.url <- c()
Harden.url <- c()
# 找出有關鍵字的標題並分類
lbj1 <- grep("姆斯",title)
lbj2 <- grep("James",title)
lbj3 <- grep("LBJ",title)
lbj4 <- grep("LeBron",title)
curry1 <- grep("Curry", title)
curry2 <- grep("柯瑞", title)
harden1 <- grep("Harden", title)
harden2 <- grep("哈登", title)
giannis1 <- grep("Giannis", title)
giannis2 <- grep("字母", title)
Lebron <- c(Lebron,title[lbj1])
Lebron <- c(Lebron,title[lbj2])
Lebron <- c(Lebron,title[lbj3])
Lebron <- c(Lebron,title[lbj4])
Lebron.url <- c(Lebron.url,data[lbj1])
Lebron.url <- c(Lebron.url,data[lbj2])
Lebron.url <- c(Lebron.url,data[lbj3])
Lebron.url <- c(Lebron.url,data[lbj4])
Curry <- c(Curry,title[curry1])
Curry <- c(Curry,title[curry2])
Curry.url <- c(Curry.url,data[curry1])
Curry.url <- c(Curry.url,data[curry2])
Harden <- c(Harden,title[harden1])
Harden <- c(Harden,title[harden2])
Harden.url <- c(Harden.url, data[harden1])
Harden.url <- c(Harden.url, data[harden2])
Giannis <- c(Giannis,title[giannis1])
Giannis <- c(Giannis,title[giannis2])
Giannis.url <- c(Giannis.url, data[giannis1])
Giannis.url <- c(Giannis.url, data[giannis2])
message <- list()
cc = worker()
LBJTDF <- data.frame()
SCTDF <- data.frame()
GATDF <- data.frame()
JHTDF <- data.frame()
for(i in c(1:length(Giannis))){
html <- htmlParse(GET(Giannis.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
GATDF <- abc}
else{
GATDF <- merge(GATDF, abc, by = "word", all = T)}
}
GATDF[is.na(GATDF)] <- 0
library(knitr)
kable(head(GATDF))
n <- length(Giannis)
tf <- apply(as.matrix(GATDF[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,2:(n+1)]), 1, idfCal)
doc.tfidf <- GATDF
for(x in 1:nrow(GATDF))
{
for(y in 2:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
kable(head(GATDF))
View(doc.tfidf)
kable(head(doc.tfidf))
View(doc.tfidf)
kable(head(doc.tfidf$`7`))
kable(head(arrange(doc.tfidf,desc(8))))
library(dplyr)
kable(head(arrange(doc.tfidf,desc(8))))
kable(head(arrange(doc.tfidf,desc("8"))))
arrange(doc.tfidf,desc(8)))
arrange(doc.tfidf,desc(8))
order(doc.tfidf$`6`, decreasing = TRUE)
View(doc.tfidf)
doc.tfidf[ order(doc.tfidf$`6`, decreasing = TRUE), ]
head(doc.tfidf[order(doc.tfidf$`6`, decreasing = TRUE), ])
View(doc.tfidf)
setwd("~/Desktop/cs-x-programming/hw5")
View(doc.tfidf)
View(GATDF)
for(x in 1:nrow(GATDF))
{
for(y in 1:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
View(doc.tfidf)
doc.tfidf <- GATDF
View(GATDF)
View(GATDF)
n <- length(Giannis)
tf <- apply(as.matrix(GATDF[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,1:n]), 1, idfCal)
doc.tfidf <- GATDF
for(x in 1:nrow(GATDF))
{
for(y in 2:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
View(doc.tfidf)
n <- length(Giannis)
tf <- apply(GATDF, 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(GATDF, 1, idfCal)
tf <- apply(GATDF, 2, sum)
n <- length(Giannis)
tf <- apply(as.matrix(GATDF), 2, sum)
tf <- apply(as.matrix(GATDF), 2, sum)
tf <- apply(as.matrix(GATDF[,2:(n+1)]), 2, sum)
n <- length(GATDF)
tf <- apply(as.matrix(GATDF[,2:ncol(GATDF)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,1:nrow(GATDF)]), 1, idfCal)
idf <- apply(as.matrix(GATDF[,1:nrow(GATDF)]), 1, idfCal)
idf <- apply(as.matrix(GATDF[,1:nrow(GATDF)]), 1, idfCal)
tf <- apply(as.matrix(GATDF[,2:ncol(GATDF)]), 2, sum)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,1:nrow(GATDF)]), 1, idfCal)
idf <- apply(as.matrix(GATDF[1:nrow(GATDF),]), 1, idfCal)
doc.tfidf <- GATDF
for(x in 1:nrow(GATDF))
{
for(y in 2:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y]) * idf[x]
}
}
View(doc.tfidf)
print(nrow(GATDF))
print(ncol(GATDF))
print(tf)
n <- length(Giannis)
tf <- apply(as.matrix(GATDF[,2:(n+1)]), 2, sum)
print(tf)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,2:(n+1)]), 1, idfCal)
print(ncol(GATDF))
doc.tfidf <- GATDF
for(x in 1:nrow(GATDF))
{
for(y in 1:ncol(GATDF))
{
doc.tfidf[x,y+1] <- (doc.tfidf[x,y+1] / tf[y]) * idf[x]
}
}
n <- length(Giannis)
tf <- apply(as.matrix(GATDF[,2:(n+1)]), 2, sum)
print(tf)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,2:(n+1)]), 1, idfCal)
print(ncol(GATDF))
doc.tfidf <- GATDF
for(x in 1:nrow(GATDF))
{
for(y in 2:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y+1] / tf[y-1]) * idf[x]
}
}
n <- length(Giannis)
tf <- apply(as.matrix(GATDF[,2:(n+1)]), 2, sum)
print(tf)
library(Matrix)
idfCal <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf <- apply(as.matrix(GATDF[,2:(n+1)]), 1, idfCal)
print(ncol(GATDF))
doc.tfidf <- GATDF
for(x in 1:nrow(GATDF))
{
for(y in 2:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y-1]) * idf[x]
}
}
View(doc.tfidf)
head(doc.tfidf[order(doc.tfidf$`6`, decreasing = TRUE), ])
head(doc.tfidf[order(doc.tfidf$`4`, decreasing = TRUE), ])
head(doc.tfidf[order(doc.tfidf$`1`, decreasing = TRUE), ])
all.term <- rownames(doc.tfidf)
loc <- which(all.term %in% q)
head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ])
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- rbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]))
}
View(topwords)
head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ])
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]))
}
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, head(doc.tfidf[,order(doc.tfidf[i], decreasing = TRUE) ]))
}
topwords <- cbind(topwords, head(doc.tfidf[ ,order(doc.tfidf[i], decreasing = TRUE)]))
head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ])
head(doc.tfidf[order(doc.tfidf[2]$`1`, decreasing = TRUE), ])
head(subset(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]))
head(subset(doc.tfidf, "1" > 0.08, select = '1'))
head(subset(doc.tfidf, "1" > 0.08, select = c('word','1'))
head(subset(doc.tfidf, "1" > 0.08, select = c('word','1')))
head(subset(doc.tfidf, "1" > 0.08, select = word,'1'))
head(subset(doc.tfidf, "1" > 0.08, select = word))
head(subset(doc.tfidf, "1" > 0.08, select = c(word,1)))
head(subset(doc.tfidf, "1" > 0.08, select = c(word,'1')))
head(subset(doc.tfidf, "1" > 0.08, select = c(word,'1')))
head(subset(doc.tfidf, '1' > 0.08, select = c(word,'1')))
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[ ,order(doc.tfidf[i], decreasing = TRUE)]), select = as.character(i)))
}
head(doc.tfidf[ ,order(doc.tfidf[2], decreasing = TRUE)])
head(doc.tfidf[ ,order(doc.tfidf[2], decreasing = TRUE)])
head(doc.tfidf[ order(doc.tfidf[2], decreasing = TRUE)],)
head(doc.tfidf[ ,order(doc.tfidf[2], decreasing = TRUE)])
order(doc.tfidf[2], decreasing = TRUE)
doc.tfidf[, order(doc.tfidf[2], decreasing = TRUE)]
n <- length(Giannis)
doc.tfidf[1 ,order(doc.tfidf[2], decreasing = TRUE)]
doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]
head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ])
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = as.character(3))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = as.character(1))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,as.character(1)))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = word)
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = word,as.character(1))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,as.character(1)))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,1))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word, '1'))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word))
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`))
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`)))
}
for (i in c(2:ncol(doc.tfidf))){
topwords <- rbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`)))
}
View(topwords)
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- rbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`)))
}
View(topwords)
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- rbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]), select = c(word,`i`)))
}
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]), select = word))
}
View(topwords)
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]),as.character(i) > 0.08, select = word))
}
{
for(y in 2:ncol(GATDF))
{
doc.tfidf[x,y] <- (doc.tfidf[x,y] / tf[y-1]) * idf[x]
}
}
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]), select = word))
}
topwords <- data.frame()
for (i in c(2:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]), select = word))
}
topwords <- subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = word)
for (i in c(3:ncol(doc.tfidf))){
topwords <- cbind(topwords, subset(head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE), ]), select = word))
}
View(topwords)
topwords <- subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`))
View(topwords)
print(`1`)
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),]))
View(topwords)
for (i in c(3:ncol(doc.tfidf))){
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),])[i])
}
View(topwords)
topwords <- subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`))
for (i in c(3:ncol(doc.tfidf))){
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),])[i])
}
topwords <- subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`))
for (i in c(3:ncol(doc.tfidf))){
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),])[1])
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),])[i])
}
subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`i`))
View(topwords)
topwords <- subset(head(doc.tfidf[order(doc.tfidf[2], decreasing = TRUE), ]), select = c(word,`1`))
for (i in c(3:ncol(doc.tfidf))){
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),])[1])
topwords <- cbind(topwords, head(doc.tfidf[order(doc.tfidf[i], decreasing = TRUE),])[i])
}
